{"ast":null,"code":"var _jsxFileName = \"/Users/attari.v/Documents/GitHub/Event-Top/client/src/App.js\",\n  _s = $RefreshSig$();\n// App.js\nimport React, { useState, useEffect } from 'react';\nimport { Container, Form, Button, Badge, Dropdown, Modal, Alert, Row, Col } from 'react-bootstrap';\nimport './App.css';\n//import dotenv from 'dotenv';\n//dotenv.config();\n\nimport PayPalButton from './PayPalButton';\nimport PurchaseCart from './PurchaseCart';\n//import { useReactToPrint } from 'react-to-print';\n//import PrintableContent from './PrintableContent';\nimport PrintView from './PrintView';\n//import ReactDOMServer from 'react-dom/server';\n\n// Import the image at the top of your component file\n\n//import ReactDOM from 'react-dom';\nimport { calculateTotalWithFee } from './utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  ////// DECLARED CONSTANTS\n  ////// DECLARED CONSTANTS\n  ////// DECLARED CONSTANTS\n  ////// DECLARED CONSTANTS\n\n  const [tables, setTables] = useState(Array.from({\n    length: 30\n  }, () => ({\n    reservations: [],\n    capacity: 8\n  })));\n\n  //const [tables, setTables] = useState([]);\n\n  //useEffect(() => {\n  //// Load table data from the JSON file\n  //const loadTableData = async () => {\n  //try {\n  //const response = await fetch('tablesData.json'); // Update with the correct path\n  //const data = await response.json();\n  //setTables(data);\n  //} catch (error) {\n  //console.error('Error loading table data:', error);\n  //}\n  //};\n\n  //loadTableData();\n  //}, []); // Run this effect only once on component mount\n\n  const [capturedDetails, setCapturedDetails] = useState(null);\n  const [reservationText, setReservationText] = useState('');\n  const [selectedTable, setSelectedTable] = useState(1);\n  const [selectedSpots, setSelectedSpots] = useState(1);\n  const [showModal, setShowModal] = useState(false);\n  //const [selectedTicketTypes, setSelectedTicketTypes] = useState(Array(1).fill('standard'));\n  const [selectedTicketTypes, setSelectedTicketTypes] = useState(Array(selectedSpots).fill('select'));\n  const [showTicketFields, setShowTicketFields] = useState(false);\n  const [totalTicketPrice, setTotalTicketPrice] = useState(0);\n  const [purchaseTimeout, setPurchaseTimeout] = useState(null);\n  const [remainingTime, setRemainingTime] = useState(10 * 60); // 5 minutes in seconds\n  const [fee, setFee] = useState(0);\n  const [feePercentage, setFeePercentage] = useState(6); // Set your desired fee percentage here\n  const [transfeePercentage, setTransFeePercentage] = useState(2.9); // Set your desired fee percentage here\n\n  // Assuming you have a state variable and its setter function for buyer's email\n  const [buyerEmail, setBuyerEmail] = useState('');\n\n  // Initialize newTotalTicketPrice state\n  const [newTotalTicketPrice, setNewTotalTicketPrice] = useState(0);\n  const [purchasedItems, setPurchasedItems] = useState([]);\n\n  // Purchase success variables\n  const [showSuccessModal, setShowSuccessModal] = useState(false);\n  const [transactionDetails, setTransactionDetails] = useState(null);\n  const handleShowSuccessModal = () => setShowSuccessModal(true);\n  const handleCloseSuccessModal = () => setShowSuccessModal(false);\n\n  ////// Erase all variables\n  ////// Erase all variables\n  const resetState = () => {\n    setTables(Array.from({\n      length: 30\n    }, () => ({\n      reservations: [],\n      capacity: 8\n    })));\n    setReservationText('');\n    setSelectedTable(1);\n    setSelectedSpots(1);\n    setShowModal(false);\n    setSelectedTicketTypes(Array(1).fill('select'));\n    setShowTicketFields(false);\n    setTotalTicketPrice(0);\n    setPurchaseTimeout(null);\n    setRemainingTime(10 * 60);\n    setFee(0);\n    setFeePercentage(6);\n    setTransFeePercentage(2.9);\n    setNewTotalTicketPrice(0);\n  };\n\n  ////// Ticket Prices\n  ////// Ticket Prices\n  const ticketPrices = {\n    standard: 100,\n    VIP: 120,\n    student: 1,\n    kids: 1\n  };\n  const handleTicketTypeChange = (type, index) => {\n    const updatedTicketTypes = [...selectedTicketTypes];\n\n    // Check if the selected table is in the specified range\n    const isVipTable = [1, 2, 3, 4, 16, 17, 18, 19].includes(selectedTable);\n\n    // If the selected table is a VIP table, force the ticket type to be VIP\n    if (isVipTable && type !== 'VIP') {\n      alert('Only VIP tickets are allowed for this table.');\n      updatedTicketTypes[index] = 'VIP';\n    } else {\n      updatedTicketTypes[index] = type;\n    }\n    setSelectedTicketTypes(updatedTicketTypes);\n    const newTotalTicketPrice = updatedTicketTypes.reduce((total, t) => total + ticketPrices[t], 0);\n    setTotalTicketPrice(newTotalTicketPrice);\n    clearTimeout(purchaseTimeout);\n    const timeoutId = setTimeout(() => {\n      handleCloseModal();\n      // Reload the app when the timer ends\n      alert('Purchase session expired. Please try again.');\n      window.location.reload();\n    }, remainingTime * 1000);\n    setPurchaseTimeout(timeoutId);\n  };\n  const handleAddReservation = () => {\n    const table = tables[selectedTable - 1];\n    if (selectedSpots <= table.capacity && selectedSpots <= 8) {\n      const isVipTicketAlreadyReserved = table.reservations.some(reservation => reservation.ticketTypes.includes('VIP'));\n      if (isVipTicketAlreadyReserved && [1, 2, 3, 4, 5, 16, 17, 18, 19, 20].includes(selectedTable)) {\n        alert(\"VIP ticket already reserved for this table.\");\n        return;\n      }\n      setShowModal(true);\n      setShowTicketFields(true);\n    } else if (selectedSpots > 8) {\n      alert(\"You can't reserve more than 8 spots for a single table.\");\n    } else {\n      alert(`Only ${table.capacity} spots available for this table.`);\n    }\n    setShowModal(true);\n    setShowTicketFields(true);\n  };\n\n  //const handleStoreData = async () => {\n  //setShowModal(false);\n  //setShowTicketFields(false);\n\n  //if (!buyerName || !buyerSurname) {\n  //alert('Please enter both name and surname.');\n  //return;\n  //}\n\n  //try {\n  //const response = fetch('/storeData', {\n  //method: 'POST',\n  //headers: {\n  //'Content-Type': 'application/',\n  //},\n  //body: JSON.stringify({\n  //buyerName: buyerName,\n  //buyerSurname: buyerSurname,\n  //// Add any other data you want to send to the server\n  //}),\n  //});\n\n  //if (response.ok) {\n  //const result = await response.json();\n  //try{\n  //window.location.href = result.paymentGatewayUrl;\n  //}\n  //catch(e)\n  //{\n  //console.error('Error:', e);\n  //}\n  //} else {\n  //alert('Error storing data Please try again.');\n  //}\n  //} catch (error) {\n  //console.error('Error:', error);\n  //alert('An unexpected error occurred. Please try again later.');\n  //}\n\n  //setReservationText('');\n  //setSelectedSpots(1);\n  //setSelectedTicketTypes(Array(selectedSpots).fill('standard'));\n  //setTotalTicketPrice(0);\n  //clearTimeout(purchaseTimeout);\n  //};\n\n  //const handleCloseModal = async () => {\n  //setShowModal(false);\n  //setShowTicketFields(false);\n\n  //const buyerName = document.getElementById('buyerName').value;\n  //const buyerSurname = document.getElementById('buyerSurname').value;\n\n  //if (!buyerName || !buyerSurname) {\n  //alert('Please enter both name and surname.');\n  //return;\n  //}\n\n  //// Store reservation data in localStorage\n  //const reservationData = {\n  //tableNumber: selectedTable,\n  //reservationText: reservationText,\n  //buyerName: buyerName,\n  //buyerSurname: buyerSurname,\n  //ticketTypes: selectedTicketTypes,\n  //totalTicketPrice: totalTicketPrice,\n  //};\n\n  //// Log the reservation data to the console\n  //console.log('Reservation Data:', reservationData);\n\n  //// Show a confirmation message to the user\n  //alert('Transfering to payment Gateway!');\n\n  //localStorage.setItem('reservationData', JSON.stringify(reservationData)); //??????\n\n  //try {\n  //// Redirect to the payment gateway\n  //const response = await fetch('https://www.paypal.com/sdk/js?client-id=YOUR_CLIENT_ID', {\n  //<script src=\"https://www.paypal.com/sdk/js?client-id=YOUR_CLIENT_ID\"></script>\n\n  //method: 'POST',\n  //headers: {\n  //'Content-Type': 'application/json',\n  //},\n  //body: JSON.stringify({\n  //// Include any necessary data for the purchase\n  //// Example: reservationData\n  //}),\n  //});\n\n  //if (response.ok) {\n  ////const result = await response.json();\n  ////window.location.href = result.paymentGatewayUrl;\n  //alert('Payment successful.');\n  //} else {\n  //alert('Error initiating purchase. Please try again.');\n  //}\n  //} catch (error) {\n  //console.error('Error:', error);\n  //alert('An unexpected error occurred. Please try again later.');\n  //}\n\n  //setReservationText('');\n  //setSelectedSpots(1);\n  //setSelectedTicketTypes(Array(selectedSpots).fill('standard'));\n  //setTotalTicketPrice(0);\n  //clearTimeout(purchaseTimeout);\n  //};\n\n  // Payment Gateway by Paypal\n  // Payment Gateway by Paypal\n  // Payment Gateway by Paypal\n\n  const handlePayPalPayment = () => {\n    // Replace 'YOUR_CLIENT_ID' with your PayPal client ID\n    window.paypal.Buttons({\n      createOrder: function (data, actions) {\n        const formattedTotal = totalTicketPrice.toFixed(2); // Format total price with two decimal places\n        return actions.order.create({\n          purchase_units: [{\n            amount: {\n              value: formattedTotal\n            }\n          }]\n        });\n      },\n      onApprove: function (data, actions) {\n        return actions.order.capture().then(function (details) {\n          // Handle the successful payment here\n          alert('Payment successful! Transaction completed by ' + details.payer.name.given_name);\n          setTransactionDetails(details); // Save transaction details\n          handleShowSuccessModal(); // Show the success modal\n\n          // Handle the successful payment here\n          handleShowSuccessModal(); // Show the success modal\n          // Other logic, if needed\n        });\n      },\n      onError: function (err) {\n        // Handle errors here\n        console.error('PayPal error:', err);\n        alert('Payment failed. Please try again.');\n      }\n      //style: {\n      //layout: 'vertical',\n      //color: 'gold',\n      //shape: 'rect',\n      //label: 'paypal',\n      //height: 40,\n      //width: 150,\n      //},\n    }).render('#paypal-button-container');\n  };\n  const calculateTableColor = table => {\n    if (table.capacity === 0) {\n      return 'table-full';\n    } else if (table.capacity <= table.reservations.length) {\n      return 'table-semi-empty';\n    } else {\n      return 'table-empty';\n    }\n  };\n  const getAvailableSeats = table => {\n    return table.capacity - table.reservations.length;\n  };\n\n  //function getAvailableSeats(table) {\n  //// Check if the table is defined and has the expected structure\n  //if (table && typeof table === 'object' && 'capacity' in table) {\n  //const reservedSeats = table.reservations.reduce((total, reservation) => total + reservation.spots, 0);\n  //return table.capacity - reservedSeats;\n  //}\n\n  //// Return a default value if the table is not valid\n  //return 0;\n  //}\n\n  // ... (previous code)\n\n  const handleCaptureDetails = details => {\n    // Handle the captured details as needed\n    console.log('Captured PayPal Details:', details);\n    setCapturedDetails(details);\n\n    // You can perform additional actions here, such as updating state or making API calls\n  };\n  const handleCloseModal = async () => {\n    setShowModal(false);\n    setShowTicketFields(false);\n    const buyerName = document.getElementById('buyerName').value;\n    const buyerSurname = document.getElementById('buyerSurname').value;\n    if (!buyerName || !buyerSurname) {\n      alert('Please enter both name and surname.');\n      return;\n    }\n\n    // Store reservation data in state\n    const reservationData = {\n      tableNumber: selectedTable,\n      reservationText: reservationText,\n      buyerName: buyerName,\n      buyerSurname: buyerSurname,\n      customerEmail: buyerEmail,\n      // Add customer email\n      selectedSpots: selectedSpots,\n      // Add number of seat spots\n      ticketTypes: selectedTicketTypes,\n      totalTicketPrice: totalTicketPrice\n    };\n\n    // Store reservation data in state or local storage\n    setCapturedDetails(reservationData);\n\n    // Update purchased items state\n    setPurchasedItems(prevItems => [...prevItems, reservationData]);\n\n    //const CLIENT_ID = process.env.CLIENT_ID;\n    //const { PAYPAL_CLIENT_ID, PAYPAL_CLIENT_SECRET, PORT } = process.env;\n\n    const cl_id = process.env.CLIENT_ID;\n\n    //if (!cl_id) {\n    //console.log('PayPal CL ID is not defined in the .env file.',cl_id);\n    //sconsole.log('Client ID:', cl_id);\n    //return null;\n    // }\n\n    // Use PayPal SDK to handle payment\n    const paypalScript = document.createElement('script');\n    paypalScript.src = `https://www.paypal.com/sdk/js?client-id=AYSpzj2tY_WJ6Pw5WCGRX9AnrSoX2Es12cxXyWVVZkASit6zo4LfqGiYIIQoi1ChsWmcpN7UKl4In1Ig&buyer-country=CA&currency=CAD`;\n    //paypalScript.src = `https://www.paypal.com/sdk/js?client-id=${process.env.REACT_APP_PAYPAL_CLIENT_ID}&buyer-country=CA&currency=CAD`;\n\n    paypalScript.async = true;\n    paypalScript.onload = () => {\n      handlePayPalPayment();\n    };\n    paypalScript.onerror = () => {\n      console.error('Error loading PayPal SDK');\n      // You can add more detailed error handling here\n    };\n    document.body.appendChild(paypalScript);\n    setReservationText('');\n    setSelectedSpots(1);\n    setSelectedTicketTypes(Array(selectedSpots).fill('standard'));\n    setTotalTicketPrice(0);\n    clearTimeout(purchaseTimeout);\n  };\n  const handleCloseModalTimeOut = async () => {\n    setShowModal(false);\n    setShowTicketFields(false);\n    clearTimeout(purchaseTimeout);\n  };\n  const handlePrintPurchaseCart = () => {\n    window.print();\n  };\n  const handlePrintTicket = () => {\n    window.print();\n  };\n  useEffect(() => {\n    // Calculate the total ticket price including the fee using the utility function\n    const {\n      totalWithFee,\n      trnsfee,\n      feeAmount,\n      totalfee\n    } = calculateTotalWithFee(selectedTicketTypes, ticketPrices, transfeePercentage, feePercentage);\n\n    // Set the total ticket price\n    setTotalTicketPrice(totalWithFee);\n\n    //setFee(feeAmount);\n\n    //setTransFeePercentage(trnsfee);\n\n    //console.log('feePercentage:', feePercentage);\n\n    const timeoutId = setTimeout(() => {\n      handleCloseModalTimeOut();\n      alert('Purchase session expired. Please try again.');\n      // Reload the app when the timer ends\n      window.location.reload();\n    }, remainingTime * 1000);\n\n    //setPurchaseTimeout(timeoutId);\n\n    // Update the remaining time every second\n    const intervalId = setInterval(() => {\n      setRemainingTime(prevTime => prevTime > 0 ? prevTime - 1 : 0);\n    }, 1000);\n    return () => {\n      clearTimeout(timeoutId);\n      clearInterval(intervalId);\n    };\n  }, [selectedTicketTypes, handleCloseModal, ticketPrices, remainingTime, feePercentage]);\n\n  //const printPaymentSuccessfulView = () => {\n  //if (transactionDetails && capturedDetails) {\n  //const printContent = (\n  //<div>\n  //<h3>Ticket Top!</h3>\n  //<h5>Event Name: Novruz Gala</h5>\n  //<p>Transaction completed by {transactionDetails.payer.name.given_name} {transactionDetails.payer.name.surname}</p>\n  //<p>Transaction ID: {transactionDetails.id}</p>\n  //{capturedDetails.tableNumber && <p>Table Number: {capturedDetails.tableNumber}</p>}\n  //{capturedDetails.selectedSpots && <p>Number of Seats: {capturedDetails.selectedSpots}</p>}\n  //<p>Ticket Types: {capturedDetails.ticketTypes && capturedDetails.ticketTypes.join(', ')}</p>\n  //<p>Paid Amount: {transactionDetails.purchase_units[0].amount.value}</p>\n  //<p>Purchase Date and Time: {new Date(transactionDetails.create_time).toLocaleString()}</p>\n  //{/* Add any additional information you want to display */}\n  //<p>Your ticket has been sent to your email ({capturedDetails.customerEmail})!</p>\n  //</div>\n  //);\n\n  //// Convert the React JSX content to HTML\n  //const printHTML = ReactDOMServer.renderToStaticMarkup(printContent);\n\n  //// Create a new window for printing\n  //const printWindow = window.open('', '_blank');\n\n  //// Write the HTML content to the body of the new window\n  //printWindow.document.body.innerHTML = printHTML;\n\n  //// Print the content\n  //printWindow.print();\n  //printWindow.close();\n  //} else {\n  //// Handle the case when transactionDetails or capturedDetails are not available\n  //console.error('Transaction details or captured details not available.');\n  //}\n  //};\n\n  const printPaymentSuccessfulView = () => {\n    const printWindow = window.open('', '_blank');\n    printWindow.document.write('<html><head><title>Payment Successful</title></head><body>');\n\n    // Render the PrintView component inside the new window\n    const printContent = /*#__PURE__*/_jsxDEV(PrintView, {\n      transactionDetails: transactionDetails,\n      capturedDetails: capturedDetails\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 526,\n      columnNumber: 26\n    }, this);\n    printWindow.document.write(printContent ? printContent.outerHTML : '');\n    printWindow.document.write('</body></html>');\n    printWindow.document.close();\n\n    // Wait for the content to be loaded before printing\n    printWindow.onload = () => {\n      printWindow.print();\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"mt-3\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"row d-flex justify-content-cente\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"row d-flex justify-content-cente mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"mb-3\",\n          children: \"Purchase Cart Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 550,\n          columnNumber: 9\n        }, this), purchasedItems.length > 0 && /*#__PURE__*/_jsxDEV(PurchaseCart, {\n          purchasedItems: purchasedItems\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 33\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handlePrintPurchaseCart,\n          children: \"Print Purchase Cart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 3\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 4\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 545,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"row\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"col-6\",\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"select-table-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"mb-1 mt-4\",\n              children: \"Select Table:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 565,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n              children: [/*#__PURE__*/_jsxDEV(Dropdown.Toggle, {\n                variant: \"primary\",\n                id: \"dropdown-basic\",\n                children: [\"Table \", selectedTable]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 567,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(Dropdown.Menu, {\n                children: Array.from({\n                  length: 30\n                }).map((_, index) => /*#__PURE__*/_jsxDEV(Dropdown.Item, {\n                  onClick: () => setSelectedTable(index + 1),\n                  children: [\"Table \", index + 1]\n                }, index, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 572,\n                  columnNumber: 17\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 570,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 566,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 564,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"enter-seats-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"w-75 mb-1 mt-4\",\n              children: \"Enter number of seats:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 581,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n              controlId: \"selectedSpots\",\n              children: /*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"number\",\n                placeholder: \"Number of seats\",\n                value: selectedSpots,\n                onChange: e => {\n                  const newValue = e.target.value !== '' ? Math.max(1, parseInt(e.target.value, 10)) : '';\n                  setSelectedSpots(newValue);\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 583,\n                columnNumber: 13\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 582,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 580,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            onClick: handleAddReservation,\n            className: \"rectangle-button mb-3\",\n            children: \"Add Reservation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 595,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 562,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"col-6\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"w-75 mb-1 mt-4\",\n          children: \"Select a payment method:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 629,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"paypal-button-container\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 630,\n          columnNumber: 3\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 624,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 558,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: showModal,\n      onHide: handleCloseModal,\n      dialogClassName: \"custom-modal\",\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: [\"Select Tickets - Table \", selectedTable, \" (\", getAvailableSeats(tables[selectedTable - 1]), \" available seats)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 642,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 641,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: [showTicketFields && /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(Alert, {\n            variant: \"warning\",\n            children: [\"Note: Tickets are non-refundable.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 653,\n              columnNumber: 6\n            }, this), \"Note: All fields must be completed.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 651,\n            columnNumber: 4\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"buyerName\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 658,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              placeholder: \"Enter your name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 659,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 657,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"buyerSurname\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Surname\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 663,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\",\n              placeholder: \"Enter your surname\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 664,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 662,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"buyerEmail\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 668,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"email\",\n              placeholder: \"Enter your email\",\n              onChange: e => {\n                const emailValue = e.target.value.trim();\n                // Validate email using a regular expression\n                const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n                if (emailPattern.test(emailValue) || emailValue === '') {\n                  // Valid email or empty string\n                  setBuyerEmail(emailValue);\n                } else {\n                  // Invalid email\n                  // You can display an error message or take other actions\n                }\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 669,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 667,\n            columnNumber: 13\n          }, this), [...Array(selectedSpots)].map((_, index) => /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: `ticketType-${index + 1}`,\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: `Ticket Type for Seat ${index + 1}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 690,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"d-flex align-items-center\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"mr-2\",\n                children: `Price: $${ticketPrices[selectedTicketTypes[index]]}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 692,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                as: \"select\",\n                value: selectedTicketTypes[index],\n                onChange: e => handleTicketTypeChange(e.target.value, index),\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"select\",\n                  children: \"Select\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 699,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"standard\",\n                  children: \"Standard ($100)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 700,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"VIP\",\n                  children: \"VIP ($120)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 701,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"student\",\n                  children: \"Student ($85)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 702,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"kids\",\n                  children: \"Kids ($60)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 703,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 694,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 691,\n              columnNumber: 17\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 689,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Notes:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 710,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Transcation Fee: $\", totalTicketPrice]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 712,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Total Ticket Price + Fee: $\", totalTicketPrice]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 714,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 711,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 709,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 649,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Alert, {\n          variant: \"warning\",\n          children: \"By clicking the Add to CART button, I acknowledge that I have read and agreed with the Ticket Top sales and terms of use.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 720,\n          columnNumber: 4\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 647,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-secondary\",\n          onClick: () => {\n            resetState();\n            setShowModal(false);\n          },\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 730,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"success\",\n          onClick: handleCloseModal,\n          children: \"Add to CART\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 734,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"countdown-timer\",\n          children: [\"Time Remaining: \", Math.floor(remainingTime / 60), \":\", (remainingTime % 60).toString().padStart(2, '0')]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 738,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 728,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 640,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      show: showSuccessModal,\n      onHide: handleCloseSuccessModal,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Payment Successful!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 744,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 743,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: transactionDetails && capturedDetails && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ticket-top-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"images/Ticket-Top-Barcode1.png\",\n              alt: \"Ticket Top Logo\",\n              className: \"ticket-top-logo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 750,\n              columnNumber: 5\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ticket-top-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: \"Ticket Top!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 752,\n                columnNumber: 7\n              }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n                children: \"Event Name: Novruz Gala\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 753,\n                columnNumber: 7\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Transaction completed by \", transactionDetails.payer.name.given_name, \" \", transactionDetails.payer.name.surname]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 754,\n                columnNumber: 7\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Transaction ID: \", transactionDetails.id]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 755,\n                columnNumber: 7\n              }, this), capturedDetails.tableNumber && /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Table Number: \", capturedDetails.tableNumber]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 756,\n                columnNumber: 39\n              }, this), capturedDetails.selectedSpots && /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Number of Seats: \", capturedDetails.selectedSpots]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 757,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Ticket Types: \", capturedDetails.ticketTypes && capturedDetails.ticketTypes.join(', ')]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 758,\n                columnNumber: 7\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Paid Amount: \", transactionDetails.purchase_units[0].amount.value]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 759,\n                columnNumber: 7\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Purchase Date and Time: \", new Date(transactionDetails.create_time).toLocaleString()]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 760,\n                columnNumber: 7\n              }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n                src: \"images/Ticket-Top-Barcode2.png\",\n                alt: \"\",\n                className: \"ticket-top-logo\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 761,\n                columnNumber: 7\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 763,\n                columnNumber: 7\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Your ticket has been sent to your email (\", capturedDetails.customerEmail, \")!\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 764,\n                columnNumber: 7\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 751,\n              columnNumber: 5\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 749,\n            columnNumber: 3\n          }, this)\n        }, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 746,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: handlePrintTicket,\n          children: \"Print Ticket\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 775,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: handleCloseSuccessModal,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 778,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 770,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 742,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 542,\n    columnNumber: 3\n  }, this);\n}\n_s(App, \"7keTEObygVROP036gmRpwMJIugk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Container","Form","Button","Badge","Dropdown","Modal","Alert","Row","Col","PayPalButton","PurchaseCart","PrintView","calculateTotalWithFee","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","tables","setTables","Array","from","length","reservations","capacity","capturedDetails","setCapturedDetails","reservationText","setReservationText","selectedTable","setSelectedTable","selectedSpots","setSelectedSpots","showModal","setShowModal","selectedTicketTypes","setSelectedTicketTypes","fill","showTicketFields","setShowTicketFields","totalTicketPrice","setTotalTicketPrice","purchaseTimeout","setPurchaseTimeout","remainingTime","setRemainingTime","fee","setFee","feePercentage","setFeePercentage","transfeePercentage","setTransFeePercentage","buyerEmail","setBuyerEmail","newTotalTicketPrice","setNewTotalTicketPrice","purchasedItems","setPurchasedItems","showSuccessModal","setShowSuccessModal","transactionDetails","setTransactionDetails","handleShowSuccessModal","handleCloseSuccessModal","resetState","ticketPrices","standard","VIP","student","kids","handleTicketTypeChange","type","index","updatedTicketTypes","isVipTable","includes","alert","reduce","total","t","clearTimeout","timeoutId","setTimeout","handleCloseModal","window","location","reload","handleAddReservation","table","isVipTicketAlreadyReserved","some","reservation","ticketTypes","handlePayPalPayment","paypal","Buttons","createOrder","data","actions","formattedTotal","toFixed","order","create","purchase_units","amount","value","onApprove","capture","then","details","payer","name","given_name","onError","err","console","error","render","calculateTableColor","getAvailableSeats","handleCaptureDetails","log","buyerName","document","getElementById","buyerSurname","reservationData","tableNumber","customerEmail","prevItems","cl_id","process","env","CLIENT_ID","paypalScript","createElement","src","async","onload","onerror","body","appendChild","handleCloseModalTimeOut","handlePrintPurchaseCart","print","handlePrintTicket","totalWithFee","trnsfee","feeAmount","totalfee","intervalId","setInterval","prevTime","clearInterval","printPaymentSuccessfulView","printWindow","open","write","printContent","fileName","_jsxFileName","lineNumber","columnNumber","outerHTML","close","className","children","class","onClick","Toggle","variant","id","Menu","map","_","Item","Group","controlId","Control","placeholder","onChange","e","newValue","target","Math","max","parseInt","show","onHide","dialogClassName","Header","closeButton","Title","Body","Label","emailValue","trim","emailPattern","test","as","Footer","floor","toString","padStart","alt","surname","join","Date","create_time","toLocaleString","_c","$RefreshReg$"],"sources":["/Users/attari.v/Documents/GitHub/Event-Top/client/src/App.js"],"sourcesContent":["// App.js\nimport React, { useState, useEffect } from 'react';\nimport { Container, Form, Button, Badge, Dropdown, Modal, Alert, Row, Col } from 'react-bootstrap';\nimport './App.css';\n//import dotenv from 'dotenv';\n//dotenv.config();\n\nimport PayPalButton from './PayPalButton';\nimport PurchaseCart from './PurchaseCart';\n//import { useReactToPrint } from 'react-to-print';\n//import PrintableContent from './PrintableContent';\nimport PrintView from './PrintView';\n//import ReactDOMServer from 'react-dom/server';\n\n// Import the image at the top of your component file\n\n//import ReactDOM from 'react-dom';\nimport { calculateTotalWithFee } from './utils';\n\nfunction App() {\n\t\n\t\n\t////// DECLARED CONSTANTS\n\t////// DECLARED CONSTANTS\n\t////// DECLARED CONSTANTS\n\t////// DECLARED CONSTANTS\n\n  const [tables, setTables] = useState(Array.from({ length: 30 }, () => ({ reservations: [], capacity: 8 })));\n\n  //const [tables, setTables] = useState([]);\n\n  //useEffect(() => {\n    //// Load table data from the JSON file\n    //const loadTableData = async () => {\n      //try {\n        //const response = await fetch('tablesData.json'); // Update with the correct path\n        //const data = await response.json();\n        //setTables(data);\n      //} catch (error) {\n        //console.error('Error loading table data:', error);\n      //}\n    //};\n    \n  //loadTableData();\n  //}, []); // Run this effect only once on component mount\n\n  const [capturedDetails, setCapturedDetails] = useState(null);\n\n  const [reservationText, setReservationText] = useState('');\n  const [selectedTable, setSelectedTable] = useState(1);\n  const [selectedSpots, setSelectedSpots] = useState(1);\n  const [showModal, setShowModal] = useState(false);\n  //const [selectedTicketTypes, setSelectedTicketTypes] = useState(Array(1).fill('standard'));\n  const [selectedTicketTypes, setSelectedTicketTypes] = useState(Array(selectedSpots).fill('select'));\n  const [showTicketFields, setShowTicketFields] = useState(false);\n  const [totalTicketPrice, setTotalTicketPrice] = useState(0);\n  const [purchaseTimeout, setPurchaseTimeout] = useState(null);\n\n  const [remainingTime, setRemainingTime] = useState(10 * 60); // 5 minutes in seconds\n  const [fee, setFee] = useState(0);\n  const [feePercentage, setFeePercentage] = useState(6); // Set your desired fee percentage here\n  const [transfeePercentage, setTransFeePercentage] = useState(2.9); // Set your desired fee percentage here\n\n   // Assuming you have a state variable and its setter function for buyer's email\n  const [buyerEmail, setBuyerEmail] = useState('');  \n\n  // Initialize newTotalTicketPrice state\n  const [newTotalTicketPrice, setNewTotalTicketPrice] = useState(0);\n  const [purchasedItems, setPurchasedItems] = useState([]);\n  \n  // Purchase success variables\n  const [showSuccessModal, setShowSuccessModal] = useState(false);\n  const [transactionDetails, setTransactionDetails] = useState(null);\n\n  const handleShowSuccessModal = () => setShowSuccessModal(true);\n  const handleCloseSuccessModal = () => setShowSuccessModal(false);\n\n\n\t////// Erase all variables\n\t////// Erase all variables\n  const resetState = () => {\n    setTables(Array.from({ length: 30 }, () => ({ reservations: [], capacity: 8 })));\n    setReservationText('');\n    setSelectedTable(1);\n    setSelectedSpots(1);\n    setShowModal(false);\n    setSelectedTicketTypes(Array(1).fill('select'));\n    setShowTicketFields(false);\n    setTotalTicketPrice(0);\n    setPurchaseTimeout(null);\n    setRemainingTime(10 * 60);\n    setFee(0);\n    setFeePercentage(6);\n    setTransFeePercentage(2.9);\n    setNewTotalTicketPrice(0);\n  };  \n  \n\t////// Ticket Prices\n\t////// Ticket Prices\n  const ticketPrices = {\n    standard: 100,\n    VIP: 120,\n    student: 1,\n    kids: 1,\n  };\n\nconst handleTicketTypeChange = (type, index) => {\n  const updatedTicketTypes = [...selectedTicketTypes];\n  \n  // Check if the selected table is in the specified range\n  const isVipTable = [1, 2, 3, 4, 16, 17, 18, 19].includes(selectedTable);\n\n  // If the selected table is a VIP table, force the ticket type to be VIP\n  if (isVipTable && type !== 'VIP') {\n    alert('Only VIP tickets are allowed for this table.');\n    updatedTicketTypes[index] = 'VIP';\n  } else {\n    updatedTicketTypes[index] = type;\n  }\n\n  setSelectedTicketTypes(updatedTicketTypes);\n\n  const newTotalTicketPrice = updatedTicketTypes.reduce((total, t) => total + ticketPrices[t], 0);\n  setTotalTicketPrice(newTotalTicketPrice);\n\n  clearTimeout(purchaseTimeout);\n  const timeoutId = setTimeout(() => {\n    handleCloseModal();\n    // Reload the app when the timer ends\n    alert('Purchase session expired. Please try again.');\n    window.location.reload();\n  }, remainingTime * 1000);\n  setPurchaseTimeout(timeoutId);\n};\n\nconst handleAddReservation = () => {\n  const table = tables[selectedTable - 1];\n\n  if (selectedSpots <= table.capacity && selectedSpots <= 8) {\n    const isVipTicketAlreadyReserved = table.reservations.some(reservation =>\n      reservation.ticketTypes.includes('VIP')\n    );\n\n    if (isVipTicketAlreadyReserved && [1, 2, 3, 4, 5, 16, 17, 18, 19, 20].includes(selectedTable)) {\n      alert(\"VIP ticket already reserved for this table.\");\n      return;\n    }\n\n    setShowModal(true);\n    setShowTicketFields(true);\n  } else if (selectedSpots > 8) {\n    alert(\"You can't reserve more than 8 spots for a single table.\");\n  } else {\n    alert(`Only ${table.capacity} spots available for this table.`);\n  }\n\n    setShowModal(true);\n    setShowTicketFields(true);\n};\n\n\n  //const handleStoreData = async () => {\n    //setShowModal(false);\n    //setShowTicketFields(false);\n    \n    //if (!buyerName || !buyerSurname) {\n      //alert('Please enter both name and surname.');\n      //return;\n    //}\n    \n    //try {\n      //const response = fetch('/storeData', {\n        //method: 'POST',\n        //headers: {\n          //'Content-Type': 'application/',\n        //},\n        //body: JSON.stringify({\n          //buyerName: buyerName,\n          //buyerSurname: buyerSurname,\n          //// Add any other data you want to send to the server\n        //}),\n      //});\n      \n      //if (response.ok) {\n        //const result = await response.json();\n        //try{\n\t\t\t//window.location.href = result.paymentGatewayUrl;\n\t\t//}\n\t\t//catch(e)\n\t\t//{\n\t\t//console.error('Error:', e);\n\t\t//}\n      //} else {\n        //alert('Error storing data Please try again.');\n      //}\n    //} catch (error) {\n      //console.error('Error:', error);\n      //alert('An unexpected error occurred. Please try again later.');\n    //}\n    \n    //setReservationText('');\n    //setSelectedSpots(1);\n    //setSelectedTicketTypes(Array(selectedSpots).fill('standard'));\n    //setTotalTicketPrice(0);\n    //clearTimeout(purchaseTimeout);\n  //};\n\n\n  //const handleCloseModal = async () => {\n    //setShowModal(false);\n    //setShowTicketFields(false);\n\n\t//const buyerName = document.getElementById('buyerName').value;\n\t//const buyerSurname = document.getElementById('buyerSurname').value;\n\n    //if (!buyerName || !buyerSurname) {\n      //alert('Please enter both name and surname.');\n      //return;\n    //}\n\n    //// Store reservation data in localStorage\n    //const reservationData = {\n      //tableNumber: selectedTable,\n      //reservationText: reservationText,\n      //buyerName: buyerName,\n      //buyerSurname: buyerSurname,\n      //ticketTypes: selectedTicketTypes,\n      //totalTicketPrice: totalTicketPrice,\n    //};\n\n    //// Log the reservation data to the console\n    //console.log('Reservation Data:', reservationData);\n\n    //// Show a confirmation message to the user\n    //alert('Transfering to payment Gateway!');\n\n    //localStorage.setItem('reservationData', JSON.stringify(reservationData)); //??????\n\n    //try {\n      //// Redirect to the payment gateway\n      //const response = await fetch('https://www.paypal.com/sdk/js?client-id=YOUR_CLIENT_ID', {\n\t\t  //<script src=\"https://www.paypal.com/sdk/js?client-id=YOUR_CLIENT_ID\"></script>\n\n        //method: 'POST',\n        //headers: {\n          //'Content-Type': 'application/json',\n        //},\n        //body: JSON.stringify({\n          //// Include any necessary data for the purchase\n          //// Example: reservationData\n        //}),\n      //});\n\n      //if (response.ok) {\n        ////const result = await response.json();\n        ////window.location.href = result.paymentGatewayUrl;\n        //alert('Payment successful.');\n      //} else {\n        //alert('Error initiating purchase. Please try again.');\n      //}\n    //} catch (error) {\n      //console.error('Error:', error);\n      //alert('An unexpected error occurred. Please try again later.');\n    //}\n\n    //setReservationText('');\n    //setSelectedSpots(1);\n    //setSelectedTicketTypes(Array(selectedSpots).fill('standard'));\n    //setTotalTicketPrice(0);\n    //clearTimeout(purchaseTimeout);\n  //};\n\n\n  // Payment Gateway by Paypal\n  // Payment Gateway by Paypal\n  // Payment Gateway by Paypal\n    \nconst handlePayPalPayment = () => {\n  // Replace 'YOUR_CLIENT_ID' with your PayPal client ID\n  window.paypal\n    .Buttons({\n      createOrder: function (data, actions) {\n        const formattedTotal = totalTicketPrice.toFixed(2); // Format total price with two decimal places\n        return actions.order.create({\n          purchase_units: [\n            {\n              amount: {\n                value: formattedTotal,\n              },\n            },\n          ],\n        });\n      },\n      onApprove: function (data, actions) {\n        return actions.order.capture().then(function (details) {\n          // Handle the successful payment here\n          alert('Payment successful! Transaction completed by ' + details.payer.name.given_name);\n\n          setTransactionDetails(details); // Save transaction details\n          handleShowSuccessModal(); // Show the success modal\n\n          // Handle the successful payment here\n          handleShowSuccessModal(); // Show the success modal\n          // Other logic, if needed\n        });\n      },\n      onError: function (err) {\n        // Handle errors here\n        console.error('PayPal error:', err);\n        alert('Payment failed. Please try again.');\n      }\n      //style: {\n        //layout: 'vertical',\n        //color: 'gold',\n        //shape: 'rect',\n        //label: 'paypal',\n        //height: 40,\n        //width: 150,\n      //},\n    })\n    .render('#paypal-button-container');\n};\n\n\n\n  const calculateTableColor = (table) => {\n    if (table.capacity === 0) {\n      return 'table-full';\n    } else if (table.capacity <= table.reservations.length) {\n      return 'table-semi-empty';\n    } else {\n      return 'table-empty';\n    }\n  };\n\n  const getAvailableSeats = (table) => {\n    return table.capacity - table.reservations.length;\n  };\n\n//function getAvailableSeats(table) {\n  //// Check if the table is defined and has the expected structure\n  //if (table && typeof table === 'object' && 'capacity' in table) {\n    //const reservedSeats = table.reservations.reduce((total, reservation) => total + reservation.spots, 0);\n    //return table.capacity - reservedSeats;\n  //}\n\n  //// Return a default value if the table is not valid\n  //return 0;\n//}\n\n// ... (previous code)\n\n\n\n  const handleCaptureDetails = (details) => {\n    // Handle the captured details as needed\n    console.log('Captured PayPal Details:', details);\n    setCapturedDetails(details);\n\n    // You can perform additional actions here, such as updating state or making API calls\n  };\n   \n  const handleCloseModal = async () => {\n    setShowModal(false);\n    setShowTicketFields(false);\n\n     const buyerName = document.getElementById('buyerName').value;\n     const buyerSurname = document.getElementById('buyerSurname').value;\n\n\t if (!buyerName || !buyerSurname) {\n\t\talert('Please enter both name and surname.');\n\t\treturn;\n\t }\n\n    // Store reservation data in state\n\tconst reservationData = {\n\t  tableNumber: selectedTable,\n\t  reservationText: reservationText,\n\t  buyerName: buyerName,\n\t  buyerSurname: buyerSurname,\n\t  customerEmail: buyerEmail, // Add customer email\n\t  selectedSpots: selectedSpots, // Add number of seat spots\n\t  ticketTypes: selectedTicketTypes,\n\t  totalTicketPrice: totalTicketPrice,\n\t};\n\n    // Store reservation data in state or local storage\n    setCapturedDetails(reservationData);\n  \n    // Update purchased items state\n    setPurchasedItems((prevItems) => [...prevItems, reservationData]);\n\n    //const CLIENT_ID = process.env.CLIENT_ID;\n    //const { PAYPAL_CLIENT_ID, PAYPAL_CLIENT_SECRET, PORT } = process.env;\n\n    const cl_id = process.env.CLIENT_ID;\n\n\t  //if (!cl_id) {\n\t\t//console.log('PayPal CL ID is not defined in the .env file.',cl_id);\n        //sconsole.log('Client ID:', cl_id);\n\t\t//return null;\n\t // }\n\n    // Use PayPal SDK to handle payment\n    const paypalScript = document.createElement('script');\n    paypalScript.src = `https://www.paypal.com/sdk/js?client-id=AYSpzj2tY_WJ6Pw5WCGRX9AnrSoX2Es12cxXyWVVZkASit6zo4LfqGiYIIQoi1ChsWmcpN7UKl4In1Ig&buyer-country=CA&currency=CAD`;\n    //paypalScript.src = `https://www.paypal.com/sdk/js?client-id=${process.env.REACT_APP_PAYPAL_CLIENT_ID}&buyer-country=CA&currency=CAD`;\n\n    paypalScript.async = true;\n  paypalScript.onload = () => {\n    handlePayPalPayment();\n  };\n\tpaypalScript.onerror = () => {\n\t  console.error('Error loading PayPal SDK');\n\t  // You can add more detailed error handling here\n\t};\n  document.body.appendChild(paypalScript);\n    \n  setReservationText('');\n  setSelectedSpots(1);\n  setSelectedTicketTypes(Array(selectedSpots).fill('standard'));\n  setTotalTicketPrice(0);\n  clearTimeout(purchaseTimeout);\n};\n\n\nconst handleCloseModalTimeOut = async () => {\n  setShowModal(false);\n  setShowTicketFields(false);\n\n  clearTimeout(purchaseTimeout);\n};\n\nconst handlePrintPurchaseCart = () => {\n  window.print();\n};\n\nconst handlePrintTicket = () => {\n  window.print();\n};\n\n\n\n\n\n\n\nuseEffect(() => {\n\n  // Calculate the total ticket price including the fee using the utility function\n  const { totalWithFee, trnsfee, feeAmount, totalfee } = calculateTotalWithFee(selectedTicketTypes, ticketPrices, transfeePercentage, feePercentage);\n\n  // Set the total ticket price\n  setTotalTicketPrice(totalWithFee);\n\n  //setFee(feeAmount);\n\n  //setTransFeePercentage(trnsfee);\n  \n  //console.log('feePercentage:', feePercentage);\n\n  const timeoutId = setTimeout(() => {\n    handleCloseModalTimeOut();\n    alert('Purchase session expired. Please try again.');\n    // Reload the app when the timer ends\n    window.location.reload();\n  }, remainingTime * 1000);\n  \n  //setPurchaseTimeout(timeoutId);\n\n  // Update the remaining time every second\n  const intervalId = setInterval(() => {\n    setRemainingTime((prevTime) => (prevTime > 0 ? prevTime - 1 : 0));\n  }, 1000);\n\n  return () => {\n    clearTimeout(timeoutId);\n    clearInterval(intervalId);\n  };\n}, [selectedTicketTypes, handleCloseModal, ticketPrices, remainingTime, feePercentage]);\n\n\n\n//const printPaymentSuccessfulView = () => {\n  //if (transactionDetails && capturedDetails) {\n    //const printContent = (\n      //<div>\n        //<h3>Ticket Top!</h3>\n        //<h5>Event Name: Novruz Gala</h5>\n        //<p>Transaction completed by {transactionDetails.payer.name.given_name} {transactionDetails.payer.name.surname}</p>\n        //<p>Transaction ID: {transactionDetails.id}</p>\n        //{capturedDetails.tableNumber && <p>Table Number: {capturedDetails.tableNumber}</p>}\n        //{capturedDetails.selectedSpots && <p>Number of Seats: {capturedDetails.selectedSpots}</p>}\n        //<p>Ticket Types: {capturedDetails.ticketTypes && capturedDetails.ticketTypes.join(', ')}</p>\n        //<p>Paid Amount: {transactionDetails.purchase_units[0].amount.value}</p>\n        //<p>Purchase Date and Time: {new Date(transactionDetails.create_time).toLocaleString()}</p>\n        //{/* Add any additional information you want to display */}\n        //<p>Your ticket has been sent to your email ({capturedDetails.customerEmail})!</p>\n      //</div>\n    //);\n\n    //// Convert the React JSX content to HTML\n    //const printHTML = ReactDOMServer.renderToStaticMarkup(printContent);\n\n    //// Create a new window for printing\n    //const printWindow = window.open('', '_blank');\n\n    //// Write the HTML content to the body of the new window\n    //printWindow.document.body.innerHTML = printHTML;\n\n    //// Print the content\n    //printWindow.print();\n    //printWindow.close();\n  //} else {\n    //// Handle the case when transactionDetails or capturedDetails are not available\n    //console.error('Transaction details or captured details not available.');\n  //}\n//};\n\n\n  const printPaymentSuccessfulView = () => {\n    const printWindow = window.open('', '_blank');\n    printWindow.document.write('<html><head><title>Payment Successful</title></head><body>');\n\n    // Render the PrintView component inside the new window\n    const printContent = <PrintView transactionDetails={transactionDetails} capturedDetails={capturedDetails} />;\n    printWindow.document.write(printContent ? printContent.outerHTML : '');\n\n    printWindow.document.write('</body></html>');\n    printWindow.document.close();\n\n    // Wait for the content to be loaded before printing\n    printWindow.onload = () => {\n      printWindow.print();\n    };\n  };\n\n\n\n\nreturn (\n  <Container className=\"mt-3\">\n\n  {/* FIRST ROW OF TICKET STORE */}\n  <div class=\"row d-flex justify-content-cente\">\n    {/* PURCHASE CART */}\n\t  <div class=\"row d-flex justify-content-cente mt-4\">\n\t\t{/* Other components and content */}\n        \n        <h4 className=\"mb-3\">Purchase Cart Details</h4>\n\t\t{purchasedItems.length > 0 && <PurchaseCart purchasedItems={purchasedItems} />}\n\t\t{/* Other components and content */}\n\t\t<button onClick={handlePrintPurchaseCart}>Print Purchase Cart</button>\n\t  </div>\n  </div>\n\n  {/* SECOND ROW OF TICKET STORE - TWO COLUMNS */}\n  <div class=\"row\">\n    \n    <div class=\"col-6\">\n    \n    <Form>\n        {/* Select Table section */}\n        <div className=\"select-table-section\">\n          <h5 className=\"mb-1 mt-4\">Select Table:</h5>\n          <Dropdown>\n            <Dropdown.Toggle variant=\"primary\" id=\"dropdown-basic\">\n              Table {selectedTable}\n            </Dropdown.Toggle>\n            <Dropdown.Menu>\n              {Array.from({ length: 30 }).map((_, index) => (\n                <Dropdown.Item key={index} onClick={() => setSelectedTable(index + 1)}>\n                  Table {index + 1}\n                </Dropdown.Item>\n              ))}\n            </Dropdown.Menu>\n          </Dropdown>\n        </div>\n        {/* Enter number of seats section */}\n        <div className=\"enter-seats-section\">\n          <h5 className=\"w-75 mb-1 mt-4\">Enter number of seats:</h5>\n          <Form.Group controlId=\"selectedSpots\">\n            <Form.Control\n              type=\"number\"\n              placeholder=\"Number of seats\"\n              value={selectedSpots}\n              onChange={(e) => {\n                const newValue = e.target.value !== '' ? Math.max(1, parseInt(e.target.value, 10)) : '';\n                setSelectedSpots(newValue);\n              }}\n            />\n          </Form.Group>\n        </div>\n        {/* Button to add reservation */}\n        <Button variant=\"primary\" onClick={handleAddReservation} className=\"rectangle-button mb-3\">\n          Add Reservation\n        </Button>\n      </Form>\n\n      {/* Task list */}\n      {/* Task list */}\n      {/* Task list */}{/* \n    <Row className=\"task-list\">\n      {tables.map((table, tableIndex) => (\n        <Col key={tableIndex} xs={12} sm={6} md={4} lg={3} className={`circle-button task-item ${calculateTableColor(table)}`}>\n          <div className=\"table-info\">\n            <strong>{[1, 2, 3, 4, 5, 16, 17, 18, 19, 20].includes(tableIndex + 1) ? `VIP ${tableIndex + 1}` : `${tableIndex + 1}`}</strong>\n            <span>({table.capacity} seats)</span>\n          </div>\n          <div className=\"reservation-info\">\n            {table.reservations.map((reservation, index) => (\n              <Badge key={index} pill variant=\"info\" className=\"mr-1\">\n                {reservation.name} ({reservation.spots} spots)\n              </Badge>\n            ))}\n          </div>\n        </Col>\n      ))}\n    </Row>\n    */}\n    \n    \n    </div>\n    <div class=\"col-6\">\n\n\t\t{/* container for PayPal button */}\n\t\t{/* container for PayPal button */}\n\t\t{/* container for PayPal button */}\n\t\t<h5 className=\"w-75 mb-1 mt-4\">Select a payment method:</h5>\n\t\t<div id=\"paypal-button-container\"></div>\n    \n    </div>\n  </div>\n\n\n\n    {/* Reservation modal */}\n    {/* Reservation modal */}\n    {/* Reservation modal */}\n    <Modal show={showModal} onHide={handleCloseModal} dialogClassName=\"custom-modal\">\n      <Modal.Header closeButton>\n        <Modal.Title>\n          Select Tickets - Table {selectedTable} ({getAvailableSeats(tables[selectedTable - 1])} available seats)\n        </Modal.Title>\n      </Modal.Header>\n      {/* Modal body */}\n      <Modal.Body>\n        {showTicketFields && (\n          <Form>\n            {/* Alert */}\n\t\t\t<Alert variant=\"warning\">\n\t\t\t  Note: Tickets are non-refundable.\n\t\t\t  <br />\n\t\t\t  Note: All fields must be completed.\n\t\t\t</Alert>\n            {/* Buyer's name input */}\n            <Form.Group controlId=\"buyerName\">\n              <Form.Label>Name</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Enter your name\" />\n            </Form.Group>\n            {/* Buyer's surname input */}\n            <Form.Group controlId=\"buyerSurname\">\n              <Form.Label>Surname</Form.Label>\n              <Form.Control type=\"text\" placeholder=\"Enter your surname\" />\n            </Form.Group>\n            {/* Buyer's EMAIL input */}\n            <Form.Group controlId=\"buyerEmail\">\n              <Form.Label>Email</Form.Label>\n              <Form.Control\n                type=\"email\"\n                placeholder=\"Enter your email\"\n                onChange={(e) => {\n                  const emailValue = e.target.value.trim();\n                  // Validate email using a regular expression\n                  const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n                  if (emailPattern.test(emailValue) || emailValue === '') {\n                    // Valid email or empty string\n                    setBuyerEmail(emailValue);\n                  } else {\n                    // Invalid email\n                    // You can display an error message or take other actions\n                  }\n                }}\n              />\n            </Form.Group>\n\n            {/* Ticket type selection for each seat */}\n            {[...Array(selectedSpots)].map((_, index) => (\n              <Form.Group key={index} controlId={`ticketType-${index + 1}`}>\n                <Form.Label>{`Ticket Type for Seat ${index + 1}`}</Form.Label>\n                <div className=\"d-flex align-items-center\">\n                  <span className=\"mr-2\">{`Price: $${ticketPrices[selectedTicketTypes[index]]}`}</span>\n                  {/* Dropdown for selecting ticket type */}\n                  <Form.Control\n                    as=\"select\"\n                    value={selectedTicketTypes[index]}\n                    onChange={(e) => handleTicketTypeChange(e.target.value, index)}\n                  >\n                    <option value=\"select\">Select</option>\n                    <option value=\"standard\">Standard ($100)</option>\n                    <option value=\"VIP\">VIP ($120)</option>\n                    <option value=\"student\">Student ($85)</option>\n                    <option value=\"kids\">Kids ($60)</option>\n                  </Form.Control>\n                </div>\n              </Form.Group>\n            ))}\n            {/* Notes section */}\n            <div className=\"mt-3\">\n              <strong>Notes:</strong>\n              <ul>\n                <li>Transcation Fee: ${totalTicketPrice}</li>\n                {/* <li>Fee (6%): ${totalTicketPrice}</li> */}\n                <li>Total Ticket Price + Fee: ${totalTicketPrice}</li>\n              </ul>\n            </div>\n          </Form>\n        )}\n            {/* Alert */}\n\t\t\t<Alert variant=\"warning\">\n\t\t\t  By clicking the Add to CART button, I acknowledge that I have read and agreed with the Ticket Top sales and terms of use.\n\t\t\t</Alert>\n\n        {/* PayPal button container */}\n        {/* <div id=\"paypal-button-container\"></div> */}\n      </Modal.Body>\n      {/* Modal footer */}\n      <Modal.Footer>\n        {/* Close button */}\n        <button type=\"button\" className=\"btn btn-secondary\" onClick={() => { resetState(); setShowModal(false); }}>\n          Close\n        </button>\n        {/* Purchase button */}\n        <Button variant=\"success\" onClick={handleCloseModal}>\n          Add to CART\n        </Button>\n        {/* Countdown timer */}\n        <div className=\"countdown-timer\">Time Remaining: {Math.floor(remainingTime / 60)}:{(remainingTime % 60).toString().padStart(2, '0')}</div>\n      </Modal.Footer>\n    </Modal>\n\n<Modal show={showSuccessModal} onHide={handleCloseSuccessModal}>\n  <Modal.Header closeButton>\n    <Modal.Title>Payment Successful!</Modal.Title>\n  </Modal.Header>\n  <Modal.Body>\n{transactionDetails && capturedDetails && (\n  <>\n  <div className=\"ticket-top-header\">\n    <img src=\"images/Ticket-Top-Barcode1.png\" alt=\"Ticket Top Logo\" className=\"ticket-top-logo\" />\n    <div className=\"ticket-top-content\">\n      <h3>Ticket Top!</h3>\n      <h5>Event Name: Novruz Gala</h5>\n      <p>Transaction completed by {transactionDetails.payer.name.given_name} {transactionDetails.payer.name.surname}</p>\n      <p>Transaction ID: {transactionDetails.id}</p>\n      {capturedDetails.tableNumber && <p>Table Number: {capturedDetails.tableNumber}</p>}\n      {capturedDetails.selectedSpots && <p>Number of Seats: {capturedDetails.selectedSpots}</p>}\n      <p>Ticket Types: {capturedDetails.ticketTypes && capturedDetails.ticketTypes.join(', ')}</p>\n      <p>Paid Amount: {transactionDetails.purchase_units[0].amount.value}</p>\n      <p>Purchase Date and Time: {new Date(transactionDetails.create_time).toLocaleString()}</p>\n      <img src=\"images/Ticket-Top-Barcode2.png\" alt=\"\" className=\"ticket-top-logo\" />\n      {/* Add any additional information you want to display */}\n      <p></p>\n      <p>Your ticket has been sent to your email ({capturedDetails.customerEmail})!</p>\n    </div>\n  </div>\n  </>\n)}\n  </Modal.Body>\n  <Modal.Footer>\n    {/* Add any additional information you want to display \n    <Button variant=\"secondary\" onClick={handlePrintTicket}>\n    <Button variant=\"secondary\" onClick={printPaymentSuccessfulView}>\n    */}\n    <Button variant=\"primary\" onClick={handlePrintTicket}>\n      Print Ticket\n    </Button>\n    <Button variant=\"secondary\" onClick={handleCloseSuccessModal}>\n      Close\n    </Button>\n  </Modal.Footer>\n</Modal>\n\n\n  </Container>\n);\n\n\n\n\n\n\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}